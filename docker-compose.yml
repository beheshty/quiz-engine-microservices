version: '3.8'

services:
  questionservice.api:
    image: ${DOCKER_REGISTRY-}questionserviceapi
    build:
      context: .
      dockerfile: src/Services/QuestionService/QuestionService.API/Dockerfile
    ports:
      - "8080:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - MongoDB__ConnectionString=mongodb://mongodb:27017
      - MongoDB__DatabaseName=QuestionServiceDb
      - MongoDB__QuestionsCollectionName=Questions
    depends_on:
      - mongodb
    networks:
      - quiz-network

  questionservice.grpc:
    image: ${DOCKER_REGISTRY-}questionservicegrpc
    build:
      context: .
      dockerfile: src/Services/QuestionService/QuestionService.Grpc/Dockerfile
    ports:
      - "8081:8080"
      - "8082:8081"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - MongoDB__ConnectionString=mongodb://mongodb:27017
      - MongoDB__DatabaseName=QuestionServiceDb
      - MongoDB__QuestionsCollectionName=Questions
    depends_on:
      - mongodb
    networks:
      - quiz-network

  quizservice.api:
    image: ${DOCKER_REGISTRY-}quizserviceapi
    build:
      context: .
      dockerfile: src/Services/QuizService/QuizService.API/Dockerfile
    ports:
      - "8083:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - DatabaseSettings__ConnectionString=Host=postgres;Database=quizdb;Username=postgres;Password=postgres
      - QuestionService__GrpcUrl=http://questionservice.grpc:8080
    depends_on:
      postgres:
        condition: service_healthy
      questionservice.grpc:
        condition: service_started
    networks:
      - quiz-network

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    command: mongod --bind_ip_all
    networks:
      - quiz-network

  postgres:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=quizdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - quiz-network

networks:
  quiz-network:
    driver: bridge

volumes:
  mongodb_data:
  postgres_data: 
