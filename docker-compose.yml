version: '3.8'

services:
  questionservice.api:
    image: ${DOCKER_REGISTRY-}questionserviceapi
    build:
      context: .
      dockerfile: src/Services/QuestionService/QuestionService.API/Dockerfile
    ports:
      - "8080:80"
    env_file:
      - auth.env
      - questions.env
    environment:
      - OAuth__ClientId=swagger-ui
      - JwtSettings__Audience=questionapi
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      - mongodb
    networks:
      - quiz-network

  questionservice.grpc:
    image: ${DOCKER_REGISTRY-}questionservicegrpc
    build:
      context: .
      dockerfile: src/Services/QuestionService/QuestionService.Grpc/Dockerfile
    ports:
      - "8081:8080"
      - "8082:8081"
    env_file:
      - questions.env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      - mongodb
    networks:
      - quiz-network

  quizservice.api:
    image: ${DOCKER_REGISTRY-}quizserviceapi
    build:
      context: .
      dockerfile: src/Services/QuizService/QuizService.API/Dockerfile
    ports:
      - "8083:80"
    env_file:
      - auth.env
      - rabbitmq.env 
    environment:
      - OAuth__ClientId=swagger-ui
      - JwtSettings__Audience=quizapi
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - DatabaseSettings__ConnectionString=Host=postgres;Database=quizdb;Username=postgres;Password=postgres
      - QuestionService__GrpcUrl=http://questionservice.grpc:8080
    depends_on:
      postgres:
        condition: service_healthy
      questionservice.grpc:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks:
      - quiz-network

  userservice.api:
    image: ${DOCKER_REGISTRY-}userserviceapi
    build:
      context: .
      dockerfile: src/Services/UserService/UserService.API/Dockerfile
    env_file:
      - auth.env
    ports:
      - "8084:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Server=sqlserver,1433;Database=UserServiceDb;User ID=sa;Password=1StrongPwd!!;TrustServerCertificate=True
      - ApplicationCookie__LoginPath=/Identity/Account/Login
      - OpenIddict__TokenEndpointUri=/connect/token
      - OpenIddict__AuthorizationEndpointUri=/connect/authorize
      - OpenIddict__Scopes__0=profile
      - OpenIddict__Scopes__1=email
      - OpenIddict__Scopes__2=quiz_api
      - OpenIddict__Scopes__3=question_api
      - OpenIddict__Scopes__4=roles
      - OpenIddict__Clients__SwaggerUI__ClientId=swagger-ui
      - OpenIddict__Clients__SwaggerUI__DisplayName=Swagger UI for Development
      - OpenIddict__Clients__SwaggerUI__RedirectUris__0=http://localhost:8083/swagger/oauth2-redirect.html
      - OpenIddict__Clients__SwaggerUI__RedirectUris__1=http://localhost:8080/swagger/oauth2-redirect.html
      - OpenIddict__Clients__SwaggerUI__PostLogoutRedirectUris__0=http://localhost:8083/swagger/
      - OpenIddict__Clients__SwaggerUI__PostLogoutRedirectUris__1=http://localhost:8080/swagger/
    depends_on:
      - sqlserver
    networks:
      - quiz-network

  userservice.grpc:
    image: ${DOCKER_REGISTRY-}userservicegrpc
    build:
      context: .
      dockerfile: src/Services/UserService/UserService.Grpc/Dockerfile
    ports:
      - "8085:8080"
      - "8086:8081"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Server=sqlserver,1433;Database=UserServiceDb;User ID=sa;Password=1StrongPwd!!;TrustServerCertificate=True 
    depends_on:
      - sqlserver
    networks:
      - quiz-network

  notificationservice.worker:
    image: ${DOCKER_REGISTRY-}notificationserviceworker
    build:
      context: .
      dockerfile: src/Services/NotificationService/NotificationService.Worker/Dockerfile
    env_file:
      - rabbitmq.env 
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - UserService__GrpcUrl=http://userservice.grpc:8080
      - SMTP__Port=587
      - SMTP__Host=smtp.example.com
      - SMTP__User=your_smtp_user
      - SMTP__Pass=your_smtp_password
      - SMTP__FromAddress=no-reply@example.com
      - SMTP__FromName=QuizEngine
    depends_on:
      - rabbitmq
      - userservice.grpc
    networks:
      - quiz-network

  apigateway.api:
    image: ${DOCKER_REGISTRY-}apigatewayapi
    build:
      context: .
      dockerfile: src/Services/ApiGateway/ApiGateway.API/Dockerfile
    ports:
      - "8000:80"
    env_file:
      - auth.env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
    depends_on:
      - questionservice.api
      - quizservice.api
      - userservice.api
    networks:
      - quiz-network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    ports:
        - "5672:5672"
        - "15672:15672"
    volumes:
        - rabbitmq_data:/var/lib/rabbitmq/
        - rabbitmq_log:/var/log/rabbitmq
    networks:
      - quiz-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    command: mongod --bind_ip_all
    networks:
      - quiz-network

  postgres:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=quizdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - quiz-network

  sqlserver:
    container_name: sqlserver
    hostname: sqlserver
    image: mcr.microsoft.com/mssql/server:2022-latest
    ports:
      - "1433:1433"
    environment:
      MSSQL_SA_PASSWORD: "1StrongPwd!!"
      SA_PASSWORD: "1StrongPwd!!"
      ACCEPT_EULA: "Y"
    volumes:
      - sqlserver_data:/var/opt/mssql
    networks:
      - quiz-network

networks:
  quiz-network:
    driver: bridge

volumes:
  mongodb_data:
  postgres_data:
  sqlserver_data:
  rabbitmq_data:
  rabbitmq_log:
